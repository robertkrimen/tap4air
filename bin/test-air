#!/usr/bin/env perl

use strict;
use warnings;

use Path::Class;
use File::Temp qw/ tempdir /;
use File::Copy qw/ copy /;
use IPC::System::Simple qw/ run /;
use Getopt::Long qw/ GetOptions /;

my $build_air = $ENV{ BUILD_AIR } or do {
    print STDERR <<_END_;
Missing \$BUILD_AIR
# \$FLEX_PATH/bin/mxmlc -incremental +configname=air -compiler.source-path=src/ -debug
_END_
    exit -1;
};
my $run_air = $ENV{ RUN_AIR } or do {
    print STDERR <<_END_;
Missing \$RUN_AIR
# \$FLEX_PATH/bin/adl
_END_
    exit -1;
};

my $as = shift @ARGV;
die "Missing .as file" unless defined $as && length $as;
$as  = file $as;

my %test;
$test{dir} = dir( '.t', (join '-', $as->parent->dir_list, $as->basename ) );
$test{dir}->mkpath;
$test{as} = $test{dir}->file( 'test.as' );
$test{xml} = $test{dir}->file( 'test.xml' );
$test{result} = $test{dir}->file( 'result.tap' );

my ( $scaffold, @content, @import_content, @test_content );
if ( ! -s $test{as} || $test{as}->stat->mtime < $as->stat->mtime ) {
    @content = $as->slurp;
    if ( $content[ 0 ] =~ m/^\s*\/\/\s*!tap4air\b/ ) {
        $scaffold = 1;
        my $split = -1;
        my $found = 0;
        for ( @content ) {
            $split += 1;
            if ( m/^\s*\/\/\s*\-\-\-\s*$/ ) {
                $found = 1;
                last;
            }
        }

        if ( $found ) {
            @import_content = @content[ 1 .. $split - 1 ];
            @test_content = @content[ $split + 1 .. @content - 1 ];
        }
        else {
            @test_content = @content[ 1 .. @content - 1 ];
        }
    }

    if ( $scaffold ) {
        $test{as}->openw->print( <<_END_ );
package {

import yzzy.tap4air.Test;
import mx.core.UIComponent;
import flash.desktop.NativeApplication;
@{[ join '', @import_content ]}

    public class test extends UIComponent {
        
        public function test() {
var \$:* = Test.singleton();
@{[ join '', @test_content ]}
        }
    }
}
_END_

        $test{xml}->openw->print( <<_END_ );
<?xml version="1.0" encoding="UTF-8"?>
<application xmlns="http://ns.adobe.com/air/application/1.5">
    <id>test</id>
    <version>0.0</version>
    <filename>test</filename>
    <initialWindow>
        <content>test.swf</content>
    </initialWindow>
</application>
_END_
    }
    else {
        my $xml = $as->parent->file( 'test.xml' );
        die "Missing .xml file" unless -s $xml;

        copy "$xml", "$test{xml}" or die "Failed copy => $xml";

        if ( ! -s $test{as} || $test{as}->stat->mtime < $as->stat->mtime ) {
            copy "$as", "$test{as}" or die "Failed copy $as => $test{as}";
        }
    }
}

run "$build_air $test{as}";
run "$run_air $test{xml} > $test{result}";
print $test{result}->slurp;

__END__

if ( ! $scaffold ) {

    my $xml = $as->parent->file( 'test.xml' );
    die "Missing .xml file" unless -s $xml;

    copy "$xml", "$test{xml}" or die "Failed copy => $xml";

    if ( ! -s $test{as} || $test{as}->stat->mtime < $as->stat->mtime ) {
        copy "$as", "$test{as}" or die "Failed copy $as => $test{as}";
    }
}
else {

    if ( ! -s $test{as} || $test{as}->stat->mtime < $as->stat->mtime ) {
        my $content = $as->slurp;
        $test{as}->openw->print( <<_END_ );
package {
    import yzzy.tap4air.Test;
    import mx.core.UIComponent;
    import flash.desktop.NativeApplication;

    public class test extends UIComponent {
        
        public function test() {
var \$:* = Test.singleton();
$content
        }
    }
}
_END_
    }

    $test{xml}->openw->print( <<_END_ );
<?xml version="1.0" encoding="UTF-8"?>
<application xmlns="http://ns.adobe.com/air/application/1.5">
    <id>test</id>
    <version>0.0</version>
    <filename>test</filename>
    <initialWindow>
        <content>test.swf</content>
    </initialWindow>
</application>
_END_

}

run "$build_air $test{as}";
run "$run_air $test{xml} > $test{result}";
print $test{result}->slurp;
